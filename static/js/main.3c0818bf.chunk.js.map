{"version":3,"sources":["components/Button/Button.js","components/Input/InputContainer.js","App.js","serviceWorker.js","index.js"],"names":["Button","children","handleClick","className","isNaN","onClick","InputContainer","final","temp","finalReset","tempReset","backspace","onDoubleClick","App","useState","tempInp","setTempInp","finalInp","setFinalInp","opsActive","setOpsActive","setEqualStatus","value","prevState","charsForOps","split","charsClone","lastChar","pop","joinedChars","join","cloneFinalInp","x","console","log","equal","math","onKeyPress","event","charCode","handleKeyboard","style","textAlign","tempLength","length","finalClone","i","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3c0818bf.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Button.css\";\r\n\r\nexport default function Button({ children, handleClick }) {\r\n  let className = \"\";\r\n  if (!isNaN(children) || children === \"=\" || children === \".\") {\r\n    className = \"btn\";\r\n  } else {\r\n    className = \"btn operator\";\r\n  }\r\n  return (\r\n    <button className={className} onClick={() => handleClick(children)}>\r\n      {children}\r\n    </button>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./InputContainer.css\";\r\n\r\nexport default function InputContainer({\r\n  final,\r\n  temp,\r\n  finalReset,\r\n  tempReset,\r\n  backspace,\r\n}) {\r\n  return (\r\n    <div className=\"InputContainer\">\r\n      <p onDoubleClick={finalReset}>{final == \"\" ? \"0\" : final}</p>\r\n      <hr />\r\n      <h3 onDoubleClick={tempReset} onClick={backspace}>\r\n        {temp}\r\n      </h3>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Button from \"./components/Button/Button\";\nimport InputContainer from \"./components/Input/InputContainer\";\nimport * as math from \"mathjs\";\n\nfunction App() {\n  const [tempInp, setTempInp] = useState(\"0\");\n  const [finalInp, setFinalInp] = useState(\"0\");\n  const [opsActive, setOpsActive] = useState(true);\n  const [equalStatus, setEqualStatus] = useState(false);\n\n  const finalReset = () => {\n    setTempInp(\"0\");\n    setFinalInp(\"0\");\n    setOpsActive(false);\n  };\n\n  const tempReset = () => {\n    const tempLength = tempInp.split(\"\").length;\n    console.log(tempLength);\n    const finalClone = [...finalInp];\n    for (let i = 1; i <= tempLength; i++) {\n      finalClone.pop();\n    }\n    setTempInp(\"0\");\n    setFinalInp(finalClone.join(\"\"));\n    setOpsActive(true);\n  };\n\n  const backspace = () => {\n    //   const charsForOps = finalInp.split(\"\");\n    //   const charsForBack = tempInp.split(\"\")\n    // if(charsForBack.length>=2){\n    //     charsForOps.pop();\n    //     setFinalInp(charsForOps.join(''))\n    //     charsForBack.pop();\n    //     setTempInp(charsForBack.join(''))}\n    //     else if(charsForBack !== '0'){\n    //     }\n  };\n\n  const handleClick = (value) => {\n    if (value === \"*\" || value === \"/\" || value === \"+\" || value === \"-\") {\n      if (opsActive === false) {\n        setFinalInp((prevState) => prevState + value);\n        setTempInp(\"0\");\n        setOpsActive(true);\n      } else {\n        const charsForOps = finalInp.split(\"\");\n\n        const charsClone = [...charsForOps];\n        const lastChar = charsClone.pop();\n\n        if (\n          lastChar === \"*\" ||\n          lastChar === \"/\" ||\n          lastChar === \"+\" ||\n          lastChar === \"-\"\n        ) {\n          const joinedChars = charsClone.join(\"\");\n          const newFinalInput = joinedChars + value;\n          setFinalInp(newFinalInput);\n        }\n      }\n    } else if (value === \"=\") {\n      const cloneFinalInp = [...finalInp];\n      const x = cloneFinalInp.pop();\n      if (x === \"-\" || x === \"+\" || x === \"/\" || x === \"*\") {\n        console.log(x);\n        var equal = math.evaluate(cloneFinalInp.join(\"\"));\n      } else {\n        var equal = math.evaluate(finalInp);\n      }\n      setTempInp(equal);\n      setEqualStatus(true);\n    } else {\n      if (tempInp === \"0\" || equal === true) {\n        setTempInp(\"\");\n      }\n      if (finalInp === \"0\") {\n        setFinalInp(\"\");\n      }\n      setTempInp((prevState) => prevState + value);\n      setFinalInp((prevState) => prevState + value);\n      setOpsActive(false);\n      setEqualStatus(false);\n    }\n    setEqualStatus(true);\n  };\n\nconst handleKeyboard = (event) => {\n  console.log(event.charCode)\n}\n\n  return (\n    <div className=\"cal-container\" onKeyPress={(event) => handleKeyboard(event)}>\n      <p style={{ textAlign: \"center\" }}>Double click on results to reset</p>\n      <InputContainer\n        final={finalInp}\n        temp={tempInp}\n        tempReset={tempReset}\n        finalReset={finalReset}\n        backspace={backspace}\n      />\n      <div className=\"row\">\n        <Button handleClick={handleClick}>7</Button>\n        <Button handleClick={handleClick}>8</Button>\n        <Button handleClick={handleClick}>9</Button>\n        <Button handleClick={handleClick}>*</Button>\n      </div>\n      <div className=\"row\">\n        <Button handleClick={handleClick}>4</Button>\n        <Button handleClick={handleClick}>5</Button>\n        <Button handleClick={handleClick}>6</Button>\n        <Button handleClick={handleClick}>/</Button>\n      </div>\n      <div className=\"row\">\n        <Button handleClick={handleClick}>1</Button>\n        <Button handleClick={handleClick}>2</Button>\n        <Button handleClick={handleClick}>3</Button>\n        <Button handleClick={handleClick}>+</Button>\n      </div>\n      <div className=\"row\">\n        <Button handleClick={handleClick}>.</Button>\n        <Button handleClick={handleClick}>0</Button>\n        <Button handleClick={handleClick}>=</Button>\n        <Button handleClick={handleClick}>-</Button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}