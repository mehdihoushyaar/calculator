{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.js","components/api/index.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/corona.jpg"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","classess","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","separator","duration","Date","toDateString","useEasing","baseUrl","fetchData","country","a","possibleUrl","axios","get","fetchDailyData","map","dailyData","total","date","reportDate","modifiedData","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetch","console","log","length","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","lineChart","borderColor","fill","pointBorderWidth","pointBorderColor","CountryPicker","state","this","setState","FormControl","formControl","NativeSelect","defaultValue","onChange","e","props","handleChange","target","i","key","Component","App","selectedCountry","fetchedData","banner","src","coronaImage","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.eedad82c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__blegv\",\"card\":\"Cards_card__1SJ1I\",\"infected\":\"Cards_infected__3rQVW\",\"recovered\":\"Cards_recovered__3soh7\",\"deaths\":\"Cards_deaths__2laKa\"};","import React from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport styles from \"./Cards.module.css\";\r\nimport CountUp from \"react-countup\";\r\nimport classess from \"classnames\";\r\n\r\nconst Cards = ({ data }) => {\r\n  const { confirmed, recovered, deaths, lastUpdate } = data;\r\n  if (!confirmed) {\r\n    return \"Loading...\";\r\n  }\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={classess(styles.card, styles.infected)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Infected\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={confirmed.value}\r\n                separator=\",\"\r\n                duration=\"2.5s\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of active cases of COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={classess(styles.card, styles.recovered)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Recovered\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={recovered.value}\r\n                separator=\",\"\r\n                duration=\"2.5s\"\r\n                useEasing={true}\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of recovered cases from COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={classess(styles.card, styles.deaths)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Deaths\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={deaths.value}\r\n                separator=\",\"\r\n                duration=\"2.5s\"\r\n                useEasing={true}\r\n              />{\" \"}\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of deaths cases of COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import axios from \"axios\";\r\n\r\nconst baseUrl = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n  let possibleUrl = baseUrl;\r\n  if (country) {\r\n    possibleUrl += `/countries/${country}`;\r\n  }\r\n  try {\r\n    const {\r\n      data: { confirmed, recovered, deaths, lastUpdate },\r\n    } = await axios.get(possibleUrl);\r\n    return { confirmed, recovered, deaths, lastUpdate };\r\n  } catch (error) {}\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${baseUrl}/daily`);\r\n    const modifiedData = await data.map((dailyData) => ({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths: dailyData.deaths.total,\r\n      date: dailyData.reportDate,\r\n    }));\r\n    return modifiedData;\r\n  } catch (error) {}\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const {\r\n      data: { countries },\r\n    } = await axios.get(`${baseUrl}/countries`);\r\n    return countries.map((country) => country.name);\r\n  } catch (error) {}\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport { fetchDailyData } from \"../api\";\r\nimport styles from \"./Chart.module.css\";\r\nimport { fetchData } from \"./../api/index\";\r\n\r\nconst Chart = ({ country }) => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      if (country) {\r\n        const data = await fetchData(country);\r\n        setDailyData(data);\r\n      } else {\r\n        const data = await fetchDailyData();\r\n        setDailyData(data);\r\n      }\r\n    };\r\n    fetch();\r\n  }, [country]);\r\n\r\n\r\n\r\n\r\n  console.log(country)\r\n  if (dailyData.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  const barChart = dailyData.confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"people\",\r\n            backgroundColor: [\r\n              \"rgba(0,0,255,0.5)\",\r\n              \"rgba(0,255,0,0.5)\",\r\n              \"rgba(255,0,0,0.5)\",\r\n            ],\r\n            data: [\r\n              dailyData.confirmed.value,\r\n              dailyData.recovered.value,\r\n              dailyData.deaths.value,\r\n            ],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        title: { display: true, text: `Current State in ${country}` },\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  const lineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map((data) => data.date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map((data) => data.confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"#33f\",\r\n            fill: true,\r\n            pointBorderWidth: 0.0001,\r\n          },\r\n          {\r\n            data: dailyData.map((data) => data.deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(255, 0, 0, 0.5)\",\r\n            pointBorderWidth: 0.000001,\r\n            pointBorderColor: \"rgba(255,255,255,0)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n  return (\r\n    <div className={styles.container}>{country ? barChart : lineChart}</div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React, { Component } from \"react\";\r\nimport { FormControl, NativeSelect } from \"@material-ui/core\";\r\nimport styles from \"./CountryPicker.module.css\";\r\nimport { fetchCountries } from \"./../api/index\";\r\n\r\nclass CountryPicker extends Component {\r\n  state = {\r\n    countries: [],\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const countries = await fetchCountries();\r\n    this.setState({ countries });\r\n  }\r\n\r\n  render() {\r\n    const { countries } = this.state;\r\n    return (\r\n      <FormControl className={styles.formControl}>\r\n        <NativeSelect\r\n          defaultValue=\"\"\r\n          onChange={(e) => this.props.handleChange(e.target.value)}\r\n        >\r\n          <option value=\"\">Global</option>\r\n          {countries.map((country, i) => (\r\n            <option key={i} value={country}>\r\n              {country}\r\n            </option>\r\n          ))}\r\n        </NativeSelect>\r\n      </FormControl>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CountryPicker;\r\n","import React, { Component } from \"react\";\r\nimport { Cards, Chart, CountryPicker } from \"./components\";\r\nimport styles from \"./App.module.css\";\r\nimport { fetchData } from \"./components/api/index\";\r\nimport coronaImage from './images/corona.jpg'\r\n\r\nclass App extends Component {\r\n  state = {\r\n    data: {},\r\n    selectedCountry: \"\",\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const fetchedData = await fetchData();\r\n    this.setState({ data: fetchedData });\r\n  }\r\n\r\n  handleChange = async (country) => {\r\n    const fetchedData = await fetchData(country);\r\n    this.setState({ data: fetchedData, selectedCountry: country });\r\n  };\r\n\r\n  render() {\r\n    const { data, selectedCountry } = this.state;\r\n    return (\r\n      <div className={styles.container}>\r\n        <img className={styles.banner} src={coronaImage} />\r\n        <Cards data={data} />\r\n        <CountryPicker handleChange={this.handleChange} />\r\n        <Chart country={selectedCountry} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDom from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDom.render(<App />, document.getElementById(\"root\"));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__36h_o\",\"banner\":\"App_banner__Nkv6U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__2jbe7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__1H9tz\"};","module.exports = __webpack_public_path__ + \"static/media/corona.169be104.jpg\";"],"sourceRoot":""}